{"ast":null,"code":"function TokenProvider() {\n  //const [isRefreshing, setIsRefreshing] = React.useState(false);\n  let isRefreshing = false;\n  const getExpirationDate = jwtToken => {\n    if (jwtToken == null || jwtToken == \"\" || jwtToken == \" \") {\n      return null;\n    }\n    const jwt = JSON.parse(atob(jwtToken.split('.')[1]));\n    return jwt && jwt.exp && jwt.exp * 1000 || null;\n  };\n  const isExpired = exp => {\n    if (!exp) {\n      return false;\n    }\n    return Date.now() > exp;\n  };\n  const getToken = async () => {\n    if (sessionStorage.accessToken == null || sessionStorage.accessToken == \"\" || sessionStorage.accessToken == \" \") {\n      return null;\n    }\n    if (isExpired(getExpirationDate(sessionStorage.accessToken))) {\n      if (isRefreshing) {\n        return;\n      }\n      setIsRefreshing(true);\n      try {\n        const updatedToken = await fetch(\"https://localhost:7002/Auth/refreshToken/\" + sessionStorage.refreshToken, {\n          method: 'PUT'\n        });\n        if (updatedToken.status !== 200) {\n          setToken(null, null);\n          return null;\n        }\n        const j = await updatedToken.json();\n        setToken(j.accessToken, j.refreshToken);\n      } catch {\n        console.log(\"ERROR\");\n      } finally {\n        setIsRefreshing(false);\n      }\n    }\n    return sessionStorage.accessToken;\n  };\n  const setToken = (accessToken, refreshToken) => {\n    if (accessToken != null) {\n      sessionStorage.setItem(\"accessToken\", accessToken);\n      sessionStorage.setItem(\"refreshToken\", refreshToken);\n    } else {\n      sessionStorage.removeItem(\"accessToken\");\n      sessionStorage.removeItem(\"refreshToken\");\n    }\n  };\n  const Login = async (email, pass) => {\n    const response = await fetch(\"https://localhost:7002/Auth/login\", {\n      method: \"POST\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        login: email,\n        password: pass\n      })\n    });\n    if (response.ok) {\n      let json = await response.json();\n      setToken(json.accessToken, json.refreshToken);\n    }\n    return response.status;\n  };\n  async function Logout() {\n    const token = await getToken();\n    const response = await fetch(\"https://localhost:7002/Auth/logout/\" + token, {\n      method: \"DELETE\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    });\n    if (response.ok) {\n      setToken(null, null);\n    }\n  }\n  return {\n    getToken,\n    setToken,\n    Login,\n    Logout\n  };\n}\n_c = TokenProvider;\n;\nexport const {\n  getToken,\n  setToken,\n  Login,\n  Logout\n} = TokenProvider();\nvar _c;\n$RefreshReg$(_c, \"TokenProvider\");","map":{"version":3,"names":["TokenProvider","isRefreshing","getExpirationDate","jwtToken","jwt","JSON","parse","atob","split","exp","isExpired","Date","now","getToken","sessionStorage","accessToken","setIsRefreshing","updatedToken","fetch","refreshToken","method","status","setToken","j","json","console","log","setItem","removeItem","Login","email","pass","response","headers","body","stringify","login","password","ok","Logout","token","_c","$RefreshReg$"],"sources":["C:/Users/Дима/OneDrive/Документы/react/reactApp/src/shared/TokenProvider.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction TokenProvider(){\r\n\r\n    //const [isRefreshing, setIsRefreshing] = React.useState(false);\r\n    let isRefreshing = false\r\n\r\n    const getExpirationDate = (jwtToken?) => {\r\n        if ((jwtToken==null) || (jwtToken==\"\")|| (jwtToken==\" \")) {\r\n            return null;\r\n        }\r\n        const jwt = JSON.parse(atob(jwtToken.split('.')[1]));\r\n        return jwt && jwt.exp && jwt.exp * 1000 || null;\r\n    };\r\n\r\n\r\n    const isExpired = (exp?) => {\r\n        if (!exp) {\r\n            return false;\r\n        }\r\n        return Date.now() > exp;\r\n    };\r\n\r\n\r\n    const getToken = async () => {\r\n        if (sessionStorage.accessToken==null || sessionStorage.accessToken==\"\" || sessionStorage.accessToken==\" \") {\r\n            return null;\r\n        }  \r\n        if (isExpired(getExpirationDate(sessionStorage.accessToken))) {\r\n            if (isRefreshing) {\r\n                return;\r\n            }\r\n\r\n            setIsRefreshing(true);\r\n            try {\r\n            const updatedToken = await fetch(\"https://localhost:7002/Auth/refreshToken/\"+sessionStorage.refreshToken, {method: 'PUT',});\r\n            if (updatedToken.status!==200)\r\n            {\r\n                setToken(null, null);\r\n                return null\r\n            }\r\n            const j = await updatedToken.json()\r\n            setToken(j.accessToken, j.refreshToken);\r\n            }\r\n            catch{\r\n                console.log(\"ERROR\")\r\n            }\r\n            finally{\r\n                setIsRefreshing(false); \r\n            }\r\n        }\r\n        return sessionStorage.accessToken;\r\n    };\r\n\r\n    const setToken = (accessToken, refreshToken) => {\r\n        if (accessToken !=null) {\r\n            sessionStorage.setItem(\"accessToken\", accessToken);\r\n            sessionStorage.setItem(\"refreshToken\", refreshToken);\r\n        } else {\r\n            sessionStorage.removeItem(\"accessToken\");\r\n            sessionStorage.removeItem(\"refreshToken\");\r\n        }\r\n    };\r\n\r\n    const Login = async (email: string, pass: string) => {\r\n        const response = await fetch(\"https://localhost:7002/Auth/login\",\r\n            {\r\n              method: \"POST\",\r\n              headers:     \r\n              {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n              },\r\n              body: JSON.stringify({\r\n                login: email,\r\n                password: pass\r\n              })\r\n            });\r\n              \r\n            if(response.ok)\r\n            {\r\n              let json = await response.json();\r\n              setToken(json.accessToken, json.refreshToken)\r\n            }\r\n            return response.status;\r\n    }\r\n    \r\n\r\n    async function Logout()\r\n    {\r\n        const token = await getToken();\r\n        const response = await fetch(\"https://localhost:7002/Auth/logout/\"+token,\r\n        {\r\n            method: \"DELETE\",\r\n            headers:     \r\n            {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        });\r\n        if(response.ok)\r\n        {\r\n            setToken(null, null)\r\n        }\r\n    }       \r\n\r\n    return {\r\n        getToken,\r\n        setToken,\r\n        Login,\r\n        Logout\r\n    };\r\n};\r\n\r\nexport const {getToken, setToken, Login, Logout} = TokenProvider();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}